<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="$(ProjectDir)/bin/Go.Core.Resx.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Go.Core.Resx._code.Javascript" #>
<#@ output extension=".d.ts" #>
<#@ include file="Manager.ttinclude"#><#


// TODO: We need to get this from a centralized source of truth
const string defaultCulture = "en-US";

// Get a reference to the path where Javascript resx files exist.
var path = Host.ResolvePath(@"..\..\..\..\Go.Core.Resx\Javascript");

var resourceManager = new ResourceManager(path);

var t4Manager = Manager.Create(Host, GenerationEnvironment);

foreach(var culture in resourceManager.SupportedCultures) {

	if (resourceManager.DefaultCultureResources.Any()) {

		t4Manager.StartNewFile(string.Format("Resources.{0}.ts", culture));

// Begin Javascript Generation ------------------------ //

#>module go.Resources {

<#	foreach(var resource in resourceManager.DefaultCultureResources) { #>
	export class <#= resource.Key.Replace(".", "_") #> {
		<# foreach(var pair in resource) { #> 
			static <#= pair.Key #>: string = "<#= EncodeForJavascript(resourceManager.GetString(pair.Key, culture)) #>";
		<# } #>
	}
<# } #>
}
<#
// End Javascript Generation ------------------------ //

		t4Manager.EndBlock();
	}
}

// Begin _UnitTests Generation ------------------------ //

t4Manager.StartNewFile(@"..\_UnitTests\Resources.isgenerated.ts");

#>module go.Resources {

<#	foreach(var resource in resourceManager.DefaultCultureResources) { #>
	export class <#= resource.Key.Replace(".", "_") #> {
		<# foreach(var pair in resource) { #> 
			static <#= pair.Key #>: string = "";
		<# } #>
	}
<# } #>
}
<#

t4Manager.EndBlock();

// End _UnitTests Generation ------------------------ //

t4Manager.Process(true);

// Begin Typescript definition file generation ------------------------ //

#>
module go.Resources {
<#	foreach(var resource in resourceManager.DefaultCultureResources) { #>
	export class <#= resource.Key.Replace(".", "_") #> {
		<# foreach(var pair in resource) { #> 
			static <#= pair.Key #>: string;
		<# } #>
	}
<# } #>
}

<#
// End Typescript definition file generation ------------------------ //
#>

<#+
    public string EncodeForJavascript(string s)
    {
        if (null == s)
        {
            throw new ArgumentNullException("s");
        }

        var sb = new StringBuilder();
        foreach (char c in s)
        {
            switch (c)
            {
                case '\"':
                    sb.Append("\\\"");
                    break;
                case '\\':
                    sb.Append("\\\\");
                    break;
                case '\b':
                    sb.Append("\\b");
                    break;
                case '\f':
                    sb.Append("\\f");
                    break;
                case '\n':
                    sb.Append("\\n");
                    break;
                case '\r':
                    sb.Append("\\r");
                    break;
                case '\t':
                    sb.Append("\\t");
                    break;
                default:
                    int i = (int)c;
                    if (i < 32 || i > 127)
                    {
                        sb.AppendFormat("\\u{0:X04}", i);
                    }
                    else
                    {
                        sb.Append(c);
                    }
                    break;
            }
        }
        return sb.ToString();
    }
#>